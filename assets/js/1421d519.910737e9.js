"use strict";(self.webpackChunklazyvim=self.webpackChunklazyvim||[]).push([[5496],{3905:(n,e,t)=>{t.d(e,{Zo:()=>c,kt:()=>f});var r=t(7294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function s(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function a(n,e){if(null==n)return{};var t,r,i=function(n,e){if(null==n)return{};var t,r,i={},o=Object.keys(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var l=r.createContext({}),p=function(n){var e=r.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):s(s({},e),n)),t},c=function(n){var e=p(n.components);return r.createElement(l.Provider,{value:e},n.children)},u="mdxType",d={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(n,e){var t=n.components,i=n.mdxType,o=n.originalType,l=n.parentName,c=a(n,["components","mdxType","originalType","parentName"]),u=p(t),m=i,f=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return t?r.createElement(f,s(s({ref:e},c),{},{components:t})):r.createElement(f,s({ref:e},c))}));function f(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var o=t.length,s=new Array(o);s[0]=m;var a={};for(var l in e)hasOwnProperty.call(e,l)&&(a[l]=e[l]);a.originalType=n,a[u]="string"==typeof n?n:i,s[1]=a;for(var p=2;p<o;p++)s[p]=t[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8835:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>p});var r=t(7462),i=(t(7294),t(3905));const o={sidebar_position:5},s="Examples",a={unversionedId:"configuration/examples",id:"configuration/examples",title:"Examples",description:"",source:"@site/docs/configuration/examples.md",sourceDirName:"configuration",slug:"/configuration/examples",permalink:"/configuration/examples",draft:!1,editUrl:"https://github.com/LazyVim/lazyvim.github.io/tree/main/docs/configuration/examples.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Keymaps",permalink:"/configuration/keymaps"},next:{title:"Recipes",permalink:"/configuration/recipes"}},l={},p=[],c={toc:p};function u(n){let{components:e,...t}=n;return(0,i.kt)("wrapper",(0,r.Z)({},c,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"examples"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- every spec file under the "plugins" directory will be loaded automatically by lazy.nvim\n--\n-- In your plugin files, you can:\n-- * add extra plugins\n-- * disable/enabled LazyVim plugins\n-- * override the configuration of LazyVim plugins\nreturn {\n  -- add gruvbox\n  { "ellisonleao/gruvbox.nvim" },\n\n  -- Configure LazyVim to load gruvbox\n  {\n    "LazyVim/LazyVim",\n    opts = {\n      colorscheme = "gruvbox",\n    },\n  },\n\n  -- change trouble config\n  {\n    "folke/trouble.nvim",\n    -- opts will be merged with the parent spec\n    opts = { use_diagnostic_signs = true },\n  },\n\n  -- disable trouble\n  { "folke/trouble.nvim", enabled = false },\n\n  -- override nvim-cmp and add cmp-emoji\n  {\n    "hrsh7th/nvim-cmp",\n    dependencies = { "hrsh7th/cmp-emoji" },\n    ---@param opts cmp.ConfigSchema\n    opts = function(_, opts)\n      table.insert(opts.sources, { name = "emoji" })\n    end,\n  },\n\n  -- change some telescope options and a keymap to browse plugin files\n  {\n    "nvim-telescope/telescope.nvim",\n    keys = {\n      -- add a keymap to browse plugin files\n      -- stylua: ignore\n      {\n        "<leader>fp",\n        function() require("telescope.builtin").find_files({ cwd = require("lazy.core.config").options.root }) end,\n        desc = "Find Plugin File",\n      },\n    },\n    -- change some options\n    opts = {\n      defaults = {\n        layout_strategy = "horizontal",\n        layout_config = { prompt_position = "top" },\n        sorting_strategy = "ascending",\n        winblend = 0,\n      },\n    },\n  },\n\n  -- add pyright to lspconfig\n  {\n    "neovim/nvim-lspconfig",\n    ---@class PluginLspOpts\n    opts = {\n      ---@type lspconfig.options\n      servers = {\n        -- pyright will be automatically installed with mason and loaded with lspconfig\n        pyright = {},\n      },\n    },\n  },\n\n  -- add tsserver and setup with typescript.nvim instead of lspconfig\n  {\n    "neovim/nvim-lspconfig",\n    dependencies = {\n      "jose-elias-alvarez/typescript.nvim",\n      init = function()\n        require("lazyvim.util").lsp.on_attach(function(_, buffer)\n          -- stylua: ignore\n          vim.keymap.set( "n", "<leader>co", "TypescriptOrganizeImports", { buffer = buffer, desc = "Organize Imports" })\n          vim.keymap.set("n", "<leader>cR", "TypescriptRenameFile", { desc = "Rename File", buffer = buffer })\n        end)\n      end,\n    },\n    ---@class PluginLspOpts\n    opts = {\n      ---@type lspconfig.options\n      servers = {\n        -- tsserver will be automatically installed with mason and loaded with lspconfig\n        tsserver = {},\n      },\n      -- you can do any additional lsp server setup here\n      -- return true if you don\'t want this server to be setup with lspconfig\n      ---@type table<string, fun(server:string, opts:_.lspconfig.options):boolean?>\n      setup = {\n        -- example to setup with typescript.nvim\n        tsserver = function(_, opts)\n          require("typescript").setup({ server = opts })\n          return true\n        end,\n        -- Specify * to use this function as a fallback for any server\n        -- ["*"] = function(server, opts) end,\n      },\n    },\n  },\n\n  -- for typescript, LazyVim also includes extra specs to properly setup lspconfig,\n  -- treesitter, mason and typescript.nvim. So instead of the above, you can use:\n  { import = "lazyvim.plugins.extras.lang.typescript" },\n\n  -- add more treesitter parsers\n  {\n    "nvim-treesitter/nvim-treesitter",\n    opts = {\n      ensure_installed = {\n        "bash",\n        "html",\n        "javascript",\n        "json",\n        "lua",\n        "markdown",\n        "markdown_inline",\n        "python",\n        "query",\n        "regex",\n        "tsx",\n        "typescript",\n        "vim",\n        "yaml",\n      },\n    },\n  },\n\n  -- since `vim.tbl_deep_extend`, can only merge tables and not lists, the code above\n  -- would overwrite `ensure_installed` with the new value.\n  -- If you\'d rather extend the default config, use the code below instead:\n  {\n    "nvim-treesitter/nvim-treesitter",\n    opts = function(_, opts)\n      -- add tsx and treesitter\n      vim.list_extend(opts.ensure_installed, {\n        "tsx",\n        "typescript",\n      })\n    end,\n  },\n\n  -- the opts function can also be used to change the default opts:\n  {\n    "nvim-lualine/lualine.nvim",\n    event = "VeryLazy",\n    opts = function(_, opts)\n      table.insert(opts.sections.lualine_x, {\n        function()\n          return "\ud83d\ude04"\n        end,\n      })\n    end,\n  },\n\n  -- or you can return new options to override all the defaults\n  {\n    "nvim-lualine/lualine.nvim",\n    event = "VeryLazy",\n    opts = function()\n      return {\n        --[[add your custom lualine config here]]\n      }\n    end,\n  },\n\n  -- use mini.starter instead of alpha\n  { import = "lazyvim.plugins.extras.ui.mini-starter" },\n\n  -- add jsonls and schemastore packages, and setup treesitter for json, json5 and jsonc\n  { import = "lazyvim.plugins.extras.lang.json" },\n\n  -- add any tools you want to have installed below\n  {\n    "williamboman/mason.nvim",\n    opts = {\n      ensure_installed = {\n        "stylua",\n        "shellcheck",\n        "shfmt",\n        "flake8",\n      },\n    },\n  },\n}\n')))}u.isMDXComponent=!0}}]);