"use strict";(self.webpackChunklazyvim=self.webpackChunklazyvim||[]).push([[1358],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>f});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},y=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),c=l(t),y=a,f=c["".concat(s,".").concat(y)]||c[y]||u[y]||i;return t?r.createElement(f,o(o({ref:n},m),{},{components:t})):r.createElement(f,o({ref:n},m))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=y;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p[c]="string"==typeof e?e:a,o[1]=p;for(var l=2;l<i;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}y.displayName="MDXCreateElement"},7536:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>p,toc:()=>l});var r=t(7462),a=(t(7294),t(3905));const i={sidebar_position:4},o="Keymaps",p={unversionedId:"configuration/keymaps",id:"configuration/keymaps",title:"Keymaps",description:"LazyVim provides multiple ways to configure keymaps.",source:"@site/docs/configuration/keymaps.md",sourceDirName:"configuration",slug:"/configuration/keymaps",permalink:"/configuration/keymaps",draft:!1,editUrl:"https://github.com/LazyVim/lazyvim.github.io/tree/main/docs/configuration/keymaps.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Plugins",permalink:"/configuration/plugins"},next:{title:"Examples",permalink:"/configuration/examples"}},s={},l=[{value:"Global keymaps",id:"global-keymaps",level:2},{value:"Plugin keymaps",id:"plugin-keymaps",level:2},{value:"LSP keymaps",id:"lsp-keymaps",level:2},{value:"LSP Server keymaps",id:"lsp-server-keymaps",level:3}],m={toc:l};function c(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"keymaps"},"Keymaps"),(0,a.kt)("p",null,"LazyVim provides multiple ways to configure keymaps.\nIf you want to override an existing mapping, make sure to\ndisable it first in the correct place."),(0,a.kt)("h2",{id:"global-keymaps"},"Global keymaps"),(0,a.kt)("p",null,"Global keymaps are keymaps that are always active.\nYou can configure them in your ",(0,a.kt)("a",{parentName:"p",href:"/configuration/general#keymaps"},"lua/config/keymaps.lua")," file.\nDefault LazyVim keymaps can be deleted with ",(0,a.kt)("inlineCode",{parentName:"p"},"vim.keymap.del"),"."),(0,a.kt)("h2",{id:"plugin-keymaps"},"Plugin keymaps"),(0,a.kt)("p",null,"For more info on configuring plugin keymaps, see ",(0,a.kt)("a",{parentName:"p",href:"/configuration/plugins#%EF%B8%8F-adding--disabling-plugin-keymaps"},"Adding & Disabling Plugin Keymaps")),(0,a.kt)("h2",{id:"lsp-keymaps"},"LSP keymaps"),(0,a.kt)("p",null,"These are the default keymaps that will be added when an LSP server is attached to the current buffer.\nFor more info see ",(0,a.kt)("a",{parentName:"p",href:"/plugins/lsp#%EF%B8%8F-customizing-lsp-keymaps"},"Customizing LSP Keymaps")),(0,a.kt)("h3",{id:"lsp-server-keymaps"},"LSP Server keymaps"),(0,a.kt)("p",null,"Sometimes it may be necessary to add keymaps for a specific LSP server.\nLazyutils provides a ",(0,a.kt)("inlineCode",{parentName:"p"},"keys")," LSP option for this purpose."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "neovim/nvim-lspconfig",\n  opts = {\n    servers = {\n      tsserver = {\n        keys = {\n          { "<leader>co", "<cmd>TypescriptOrganizeImports<CR>", desc = "Organize Imports" },\n          { "<leader>cR", "<cmd>TypescriptRenameFile<CR>", desc = "Rename File" },\n        },\n      },\n    },\n  },\n}\n')))}c.isMDXComponent=!0}}]);